## All
[cmdrep]
search = (`cmdrep_indexes`)

## Accounts (groups/users)
# All account events
[cmdrep_acc]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`)

# All group events
[cmdrep_acc_group]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`) header.event_name="AUE_*_group"

# Group creation
[cmdrep_acc_group_create]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`) header.event_name="AUE_create_group"

# Group deletion
[cmdrep_acc_group_delete]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`) header.event_name="AUE_delete_group"

# Group modification
# TODO - What about remove from group?
[cmdrep_acc_group_modify]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`) (header.event_name="AUE_modify_group" OR header.event_name="AUE_add_to_group")

# All user events
[cmdrep_acc_user]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`) header.event_name="AUE_*_user"

# User creation
[cmdrep_acc_user_create]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`) header.event_name="AUE_create_user"

# User deletion
[cmdrep_acc_user_delete]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`) header.event_name="AUE_delete_user"

# User modification
[cmdrep_acc_user_modify]
search = (`cmdrep_indexes` `cmdrep_sourcetype_account`) header.event_name="AUE_modify_user"


## Audit
# All audit events
[cmdrep_audit]
search = (`cmdrep_indexes` `cmdrep_sourcetype_audit`)


## Authentication
# All auth events
[cmdrep_auth]
search = (`cmdrep_indexes` `cmdrep_sourcetype_auth`) NOT (return.description="failure : Operation not permitted" OR return.error="255")

# Auth Failure
[cmdrep_auth_failure]
search = (`cmdrep_indexes` `cmdrep_sourcetype_auth`) NOT (return.description="failure : Operation not permitted" OR return.error="255") return.description="failure:*"

# Auth Failure - Password
[cmdrep_auth_failure_password]
search = (`cmdrep_indexes` `cmdrep_sourcetype_auth`) NOT (return.description="failure : Operation not permitted" OR return.error="255") texts{}="Verify password*" subject.process_name="/System/Library/*/authorizationhost.bundle/Contents/MacOS/authorizationhost" return.description="failure:*"

# Auth Failure - Touch ID
[cmdrep_auth_failure_touchid]
search = (`cmdrep_indexes` `cmdrep_sourcetype_auth`) NOT (return.description="failure : Operation not permitted" OR return.error="255") texts{}="Touch ID authentication" return.description="failure:*"

# Auth Success
[cmdrep_auth_success]
search = (`cmdrep_indexes` `cmdrep_sourcetype_auth`) NOT (return.description="failure : Operation not permitted" OR return.error="255") return.description="success"

# Auth Success - Password
[cmdrep_auth_success_password]
search = (`cmdrep_indexes` `cmdrep_sourcetype_auth`) NOT (return.description="failure : Operation not permitted" OR return.error="255") texts{}="Verify password*" subject.process_name="/System/Library/*/authorizationhost.bundle/Contents/MacOS/authorizationhost" return.description="success"

# Auth Success - Touch ID
[cmdrep_auth_success_touchid]
search = (`cmdrep_indexes` `cmdrep_sourcetype_auth`) NOT (return.description="failure : Operation not permitted" OR return.error="255") texts{}="Touch ID authentication" return.description="success"

# Auth - Privileged (sudo)
[cmdrep_auth_sudo]
search = (`cmdrep_indexes` `cmdrep_sourcetype_auth`) NOT (return.description="failure : Operation not permitted" OR return.error="255") subject.process_name="/usr/bin/sudo"


## Disk/Volume

# All Mount/Unmount activity
[cmdrep_diskvol]
search = (`cmdrep_indexes` `cmdrep_sourcetype_disk`)

# Disk/Volume mounted
[cmdrep_diskvol_mount]
search = (`cmdrep_indexes` `cmdrep_sourcetype_disk`) header.event_name="AUE_MOUNT"

# Disk/Volume unmounted
[cmdrep_diskvol_unmount]
search = (`cmdrep_indexes` `cmdrep_sourcetype_disk`) header.event_name="AUE_UNMOUNT"


## Exec

# All exec events
[cmdrep_exec]
search = (`cmdrep_indexes` `cmdrep_sourcetype_exec`)

# App launched by root or background process
[cmdrep_exec_rootbg]
search = (`cmdrep_indexes` `cmdrep_sourcetype_exec`) subject.audit_user_name="-1"

# Firewall actibvity
[cmdrep_exec_firewall]
search = (`cmdrep_indexes` `cmdrep_sourcetype_exec`) subject.process_name="/usr/libexec/ApplicationFirewall/socketfilterfw"

# Sudo activity
[cmdrep_exec_sudo]
search = (`cmdrep_indexes` `cmdrep_sourcetype_exec`) identity.signer_id="com.apple.sudo" (subject.effective_user_id="0" AND NOT subject.audit_id="0")

# App launched by user
[cmdrep_exec_user]
search = (`cmdrep_indexes` `cmdrep_sourcetype_exec`) NOT (subject.audit_user_name="-1")


## File

# All file events
[cmdrep_file]
search = (`cmdrep_indexes` `cmdrep_sourcetype_file`)

# Crontab activity
# TODO - Is this just at or the crontab as well?
[cmdrep_file_crontab]
search = (`cmdrep_indexes` `cmdrep_sourcetype_file`) file_event_info.path="/private/var/at/*"

# Change to the etc folder
[cmdrep_file_etc]
search = (`cmdrep_indexes` `cmdrep_sourcetype_file`) file_event_info.path="/private/etc/*"

# File activity on the hosts file
[cmdrep_file_etc_hosts]
search = (`cmdrep_indexes` `cmdrep_sourcetype_file`) file_event_info.path="/private/etc/hosts"

# Login Preferences activity
[cmdrep_file_loginprefs]
search = (`cmdrep_indexes` `cmdrep_sourcetype_file`) file_event_info.path="/Users/*/Library/Preferences/com.apple.systempreferences.plist"

# Startup Items activity
[cmdrep_file_startupitems]
search = (`cmdrep_indexes` `cmdrep_sourcetype_file`) file_event_info.path="*/Library/StartupItems/*"


## Hardware
# All hardware events
[cmdrep_hardware]
search = (`cmdrep_indexes` `cmdrep_sourcetype_hardware`)

# All Removeable hardware events
[cmdrep_hardware_removable]
search = (`cmdrep_indexes` `cmdrep_sourcetype_hardware`) hardware_event_info.device_attributes.Removable="yes"

# All USB hardware events
[cmdrep_hardware_usb]
search = (`cmdrep_indexes` `cmdrep_sourcetype_hardware`) hardware_event_info.device_class="IOUSB*"

# USB device connected
[cmdrep_hardware_usb_connected]
search = (`cmdrep_indexes` `cmdrep_sourcetype_hardware`) hardware_event_info.device_class="IOUSB*" hardware_event_info.device_status="connected"

# USB device disconnected
[cmdrep_hardware_usb_disconnected]
search = (`cmdrep_indexes` `cmdrep_sourcetype_hardware`) hardware_event_info.device_class="IOUSB*" hardware_event_info.device_status="disconnected"


## Internal
# All internal events
[cmdrep_internal]
search = (`cmdrep_indexes` `cmdrep_sourcetype_internal`)

# License events
[cmdrep_internal_license]
search = (`cmdrep_indexes` `cmdrep_sourcetype_internal`) header.event_name="LICENSE_INFO_EVENT"

# Signal events
[cmdrep_internal_signal]
search = (`cmdrep_indexes` `cmdrep_sourcetype_internal`) header.event_name="SIGNAL_EVENT"


## Listen
# All listen events
[cmdrep_listen]
search = (`cmdrep_indexes` `cmdrep_sourcetype_listen`)


## Misc
# All miscelanious events
[cmdrep_misc]
search = (`cmdrep_indexes` `cmdrep_sourcetype_misc`)


## Network
# All network events
[cmdrep_network]
search = (`cmdrep_indexes` `cmdrep_sourcetype_network`)

# System network events
[cmdrep_network_system]
search = (`cmdrep_indexes` `cmdrep_sourcetype_network`) socket_inet.ip_address="*" subject.audit_user_name="-1"

# User network events
[cmdrep_network_user]
search = (`cmdrep_indexes` `cmdrep_sourcetype_network`) socket_inet.ip_address="*" NOT (subject.audit_user_name="-1")


## PTrace
# All ptrace events
[cmdrep_ptrace]
search = (`cmdrep_indexes` `cmdrep_sourcetype_ptrace`)


## Session
# All session events
[cmdrep_session]
search = (`cmdrep_indexes` `cmdrep_sourcetype_session`)


## Task
# All task events
[cmdrep_task]
search = (`cmdrep_indexes` `cmdrep_sourcetype_task`)


## Time
# All time events
[cmdrep_time]
search = (`cmdrep_indexes` `cmdrep_sourcetype_time`)

